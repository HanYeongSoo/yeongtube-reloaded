2022-02-11 유튜브 시작

*****Set Up 시작 *****

1. Node JS 란? 
	.- 크롬 V8 자바스크립트 엔진으로 빌드 된 자바스크립트 런타임
	.- 즉 브라우져 밖에서 돌아가는 자바스크립트!!
	
	.- 브라우저 밖에서도 자바스크립트가 된다 => 백앤드도 가능, 이미지 파일 처리도 가능, 계산도 가능, 삭제도 가능, 파일 업로드도 가능....
	

2. npm 이란?
	.- 자바스크립트를 위한 패키지 매니저
	.- npm과 nodeJS는 같이 써야함
	.- node명령어 보다는  npm명령어를 많이 쓸 예정

	.- 여러 사람들이 만든 패키지를 npm을 통해서 공유가 가능 -> 개발이 좀 더 쉬움


3. 프로젝트 생성 해보자!
	1. 폴더를 만든다 2.package.json이라는 파일을 만든다.
	
	*중요*
	.- 윈도우터미널 접근 후 ~ 검색 code yeongtube 검색하면 vs code로 그 폴더를 실행하므로 앞으로 이렇게 접근해야 함!!!

	.- json이란 ? -> 프로그래머가 파일에 정보를 저장하기 위해 만든 방식 중 하나
		.- 파일이름을 무조건 package.json로 만들 것
	
	* 프로젝트 생성 전에 해야할 작업1.*
	.- 터미널에서 깃 연동을 한 후 npm init을 실행하면 자동으로 package.json이 생성됨
	.- 필요한 부분은 입력하고 엔터를 누르면 생성이 완료

	2. package.json의 기능 중 하나 -> scripts!!
		.- node 로 직접 입력 안하고 npm run 이름으로 호출하면 바로 실행이 가능
		.- 이 기능을 왜 쓰냐?? --> 나중에 서버를 실행할 script, css를 포함하고 있는 script, 웹사이트에 빌드하고 배포하는 script등등
			엄청 많은 script가 있을텐데 그것들은 관리하기가 쉽지
	
	3. 서버를 만들어보자
		.- 터미널에서 npm install(i) express를 실행
		.- express를 쓰기위해선 다른 패키지도 필요함
		.- dependencies는 그 패키지를 사용하기 위해서 필요한 패키지를 모아둔 곳
		

2022-02-14
	
	1. 프로젝트를 공유하기 쉽게 할 수 있는 방법 (nodeJS 사용 시)
		.- package.json에 있는 dependencies를 보고 npm i 만 입력해도 자동으로 설치를 해줌 -> 그만큼 중요한 곳!!
		.- 즉 package.json과 package-lock.json, index.js만 공유하면 프로젝트 공유가 쉽게 가능하다는 뜻
		.- express를 실행하기 위해선 index.js에
			const express = require("express");
			const app = express();
			를 추가
			
	2. babel이란?
		.- nodeJS가 이해하지 못하는 최신 자바스크립트코드를 컴파일 해줌 === 최신코드를 쓸 수 있다
		.- npm install --save-dev @babel/core 에서 --save-dev가 뭐지?
		.- dependencies는 프로젝트에 필요한 것 // devDependencies는 개발자가 필요한 것
		.- babeljs.io에 setup에 가면 설치방법 1~4번으로 나와있음
	
	3. nodemon ? 
		.- npm install --save-dev @babel/node 를 추가 후 package.json에서 script쪽을 babel-node index.js로 바꿔준다.
		.- 그러면 import express from "사용하려는거" 로 코드를 수정해서 사용이 가능함
		
		.- npm i nodemon --save-dev 를 설치 후 script쪽을 nodemon --exec babel-node index.js로 수정
		.- 그 이후에 변경사항이 있으면 자동으로 실행을 해줌 (일일히 저장하고 npm run ~~이런걸 안해도 된다는 뜻)

*****Set Up 끝 *****

***** INTRODUCTION TO EXPRESS 시작 *****
	
	express를 사용하기 위한 설계
	1. express application을 만든다.
		.- express function()을 사용하면 express application을 생성해 줌
	2. express가 listen 하게 설정해야 한다
		.- ?? listen이 뭐지?
		.- reqeust(요청)가 들어오면 listen을 해주는 것이 Server의 기본 동작
	3. Server를 만들어보자
		.- server.js에 코드 정리 해놨음

	4. app.get("url 요청 주소", 함수이름) 으로 요청할 수 있음  ==> request를 받으면 .get에서 호출

	5.  .get() 안에는 argument인자로 두 개의 object가 있음 앞에는 request object, 뒤에는 response object를 가지고 있음!!


2022-02-15
	
	1. MIddleware란?
		.- request와  response 사이에 있는 미들소프트웨어
		.- req, res, next가 사실 더 있음
		.- 즉 .get()으로 받을 때 중간에 여러가지 미들웨어 함수가 들어갈 수 있음
		.- 미들웨어로 요청된 함수는 여러기능을 수행한 후 마지막에 next(); 를 호출해주면 .get()안에 있는 다음 함수로 요청이 진행됨

		.- 미들웨어 자체도 controller라고 생각하면 됨 대신 next도 사용하는?

	2. app.use() 란?
		.- global middleware를 만들 수 있게 해주는 함수 (어느 url에서도 작동)
		.- app.get()보다 위에 있어야 실행됨

2022-02-17

	3. Middleware를 왜 사용할까?
		.- Morgan을 먼저 설치해보자
		.- morgan이란 node.js용 request logger middleware임
		.- morgan("dev") 는 응답시간, 메소드종류를 알려줌
		.- morgan("combined")는 시간, 메소드, http버전, 사용중인 브라우저 , os등등..
		.- morgan("common")
		.- morgan("tiny"), morgan("short")까지 총 5가지 있음

***** INTRODUCTION TO EXPRESS 끝 *****	

***** ROUTERS 시작 *****	
	1. Router란?
		.- 컨트롤러와 URL의 관리를 쉽게 해줌
		.- 크게 두 가지의 데이터가 있음
			1. video
			2. user
		
		** URL을 깔끔하게 정리하기 위해서 **
		.- global router , user router, videos router를 만들고 난 후 분류한다!!

2022-02-18

	2. Router 직접 만들어 보기
		.- app.use() 를 활용해서 총 3개의 큰 router를 만든다.
		.- express.Router()로 받아온 router에서 세부 주소를 포함한 함수 및 변수를 선언한다.
		.- 세부 주소를 위해선 app.get()이 아닌 그 router.get()으로 호출을 한다.

		.- 예를 들면 URL주소가 users/edit 이면 app.use("/users", express.Router()가 선언된 변수) 로 호출 후,
			그 안에서 router.get("edit", edit을 실행할 함수)로 선언
		.- 코드로 보는게 더 빠를듯...

	3. 2번 코드 더 깔끔하게 정리
		.- 모듈화를 할거임
		.- server.js에서 각 router로 이동했자나? 그러면 export를 해줘야해
		.- defalut export 를 통해서 모듈화 시킨 router를 다른곳에서도 import해서 사용이 가능

	4. 
		.- 끊임없이 페이지가 추가되거나 기능이 추가된다면...?
		
		** 라우터랑 컨트롤러의 분리가 필요함!! **
		.- default export 랑 각각의 변수를 export하는 차이점을 알아야 한다!!
		


2022-02-22
	1. README에서 정리한 경로 다시 설정
	
	2. /:id는 무엇을 뜻하는 것일까~?
		.- variable or argument, parameter를 의미함 
		.- /video/1 , /video/2 .... 너무 많은 경로들을 하나하나 설정할 수가 없음
		.- .get()에서 /: <<< /:이 있으면 파라미터로 취급해줌
		.- 글고 라우터에서 순서도 중요함!!
			.- :/로 설정한 주소들은 제일 아래로 보내야함
			.- 근데 보통 파라미터는 숫자로 구별을 해야지 문자가 들어오는건 좀 아닌거 같오

	3. ** 정규식 **
		.- 정규식은 모든 언어에 존재하니까 잘 찾아서 사용하도록 (언어에 맞게...)
		.- 여기선 /:id(\\d+) (d는 digit (숫자만) , 그 뒤에 +는 글자수에 상관없이 숫자는 싹 불러오게 하는거)


2022-02-24
	1. html요소를 보낼 수 있는데 .send()안에 괄호안에 다 쓸건 아니자나...?
	2. 그래서 필요한 녀석이 바로 'PUG' !!

	3. PUG란?
		.- 템플릿 엔진
		.- npm i pug 로 설치 후 package.json에 설치 되었는지 확인
		.- Express에게 이제부터 사용할 view engine은 pug라는 것을 알려줘야함
			.- app.set("view engine", "pug"); 요러케
		.- 기본적으로 views라는 폴더가 기본 폴더 세팅이기 때문에 views폴더를 만들고 그 안에 home.pug를 생성
		.- home.pug에 pug형식으로 html기본 형식을 세팅해주면 나중에 요청이 오면 자동으로 랜더링을해서 우리가 아는
			html로 보여줌
		.- controller에서 res.send가 아니고 res.render("퍼그파일이름")으로 요청하고 확인
		.- 근데 경로설정이 안되어 있어서 에러가 뜰거임!

		.- 경로를 고치기 위해서 디폴트 값을 바꿔야 함
		.- 기본 디폴트 값은 (process.cwd() + '/views')임
		.- app.set("views", 기본디폴트값")으로 주소를 변경 할 수 있음
		
		.- .pug파일에서 #{}로 자바스크립트 함수를 바로 사용할 수 있음
			.- 예를들면 현재 년도를 받아오기 위해서 그냥 바로 #{Date().getFullYear()}가 사용이 가능
		
		
		.- 만약 footer같이 한 페이지마다 같은 내용이 반복되면??
		.- 그래서 나온 개념이 'partials' !!
		.- 공통된 부분을 하나로 만든 후 .pug에서 include만 하면 끝! 그럼 코드가 수정되어도 자동으로 모든 페이지에 수정된 페이지가 뿌려지겠지?
		
		.- 근데 또 생각해보면 edit.pug나 home.pug나 watch.pug나 기본 html 형식은 또 반복되자나
			.- 예를들면 doctype이나 head, body같은거
			.- 여기서 inheritance(상속)개념을 사용할 거야
		.- html의 베이스라고 생각
		.- base.pug를 생성 후 기본속성을 여기에 담은다음에 각각 다른 .pug에 extends bage.pug만 하면 끝
		.- 근데 각 .pug마다 h1속성은 다르다. 어딘 edit이고 어딘home이고...

		.- 그래서 'block'라는 개념이 등장
		.- 상속 개념이랑 비슷함 
		.- 내가 바꾸고자 하는 부분을 block 이름 으로 설정한 후 각 .pug에서 block 이름 으로 바로 변경이 가능
			.- 예를 들면 block head 라고 설정하면 각 .pug에서 block head h1 Home  //  block head h1 Edit 이런식으로 표현이 가능

		
2022-02-25
		.- 템플릿으로 변수를 어떻게 보내지?
			.- #{ } 이렇게 쓴 거를 받기 위해선 랜더링 되는 곳이 어딘지 먼저 생각!
			.- 컨트롤러에서 랜더링 되기 때문에 컨트롤러로 가서 render() 뒷 부분에 변수명을 추가
			.- {변수명으로 지정할 이름 : "페이지에 직접 보일 이름" } 이런식으로!



















